#reference https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous delivery pipeline is meant to be triggered on release, anytime a user pushes code associated to a git tag,
# and will run against multiple configurations and production environments.
# This pipeline builds the Wpf project based upon the configuration matrix below.  In order to
# create different channels of the application, the pipeline uses the Package.Identity.Name defined in the
# Package.appxmanifest in the Windows Application Packaging Project to uniquely identify the application,
# depending on which channel is being built.
# Once the MSIX is created for each channel configuration, the agent archives the AppPackages folder, then creates
# a Release with the specified git release tag. The archive is uploaded to the release as an asset for storage or distribution.
name:  Wpf Continuous Delivery

# Trigger on any push with a git tag
# To create a git tag, run the following commands on the branch you wish to release:
#   git tag 1.0.0.0
#   git push origin --tags
on:
  push:
    tags:
      - '*'

jobs:

  build:

    runs-on: windows-latest

    env:
      Solution_Path: DataToolChain.sln
      Wpf_Project_Path: DataToolChain.Ui\DataToolChain.Ui.csproj
      Output_Directory: DataToolChain.Ui\bin\Debug\netcoreapp3.1
      Wpf_Binary_Archive: DataToolChain.zip

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true

    # Get tag name
    - name: Get tag name 
      uses: olegtarasov/get-tag@v2.1
      id: tagName

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    # Build
    - name: Build application
      run: dotnet build

    # Archive the package
    - name: Create archive
      run: Compress-Archive -Path $env:Output_Directory\* -DestinationPath $env:Output_Directory\$env:Wpf_Binary_Archive

    # Create the release:  https://github.com/actions/create-release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }} #github.ref is the reference tag
        release_name:  ${{ github.ref }}
        draft: false
        prerelease: false

    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.Output_Directory }}\${{ env.Wpf_Binary_Archive }}
        asset_name: DataToolChain-${{ steps.tagName.outputs.tag }}.zip
        asset_content_type: application/zip
